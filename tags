!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
App_C_Files	sgx_u.mk	/^App_C_Files := $(UNTRUSTED_DIR)\/App.c $(UNTRUSTED_DIR)\/client-tls.c $(UNTRUSTED_DIR)\/server-tls.c$/;"	m
App_C_Flags	sgx_u.mk	/^App_C_Flags := $(SGX_COMMON_CFLAGS) -fPIC -Wno-attributes $(App_Include_Paths) $(Wolfssl_C_Extra_Flags)$/;"	m
App_C_Objects	sgx_u.mk	/^App_C_Objects := $(App_C_Files:.c=.o)$/;"	m
App_Include_Paths	sgx_u.mk	/^App_Include_Paths := -IInclude $(Wolfssl_Include_Paths) -I$(UNTRUSTED_DIR) -I$(SGX_SDK)\/include$/;"	m
App_Link_Flags	sgx_u.mk	/^App_Link_Flags := $(SGX_COMMON_CFLAGS) -L$(SGX_LIBRARY_PATH) -l$(Urts_Library_Name) -lpthread$/;"	m
BENCHMARKS_H	untrusted/App.h	23;"	d
BENCH_RSA	untrusted/App.h	31;"	d
BenchmarkBounds	untrusted/App.h	/^enum BenchmarkBounds {$/;"	g
Build_Mode	sgx_t.mk	/^Build_Mode = HW_RELEASE$/;"	m
Build_Mode	sgx_u.mk	/^Build_Mode = HW_RELEASE$/;"	m
CIPHER_LIST	untrusted/server-tls.c	42;"	d	file:
CLIENT_TLS_H	untrusted/client-tls.h	23;"	d
Common_C_Cpp_Flags	sgx_t.mk	/^Common_C_Cpp_Flags := $(SGX_COMMON_CFLAGS) -nostdinc -fvisibility=hidden -fpie -fstack-protector $(Wolfssl_Enclave_Include_Paths)-fno-builtin -fno-builtin-printf -I.$/;"	m
Crypto_Library_Name	sgx_t.mk	/^Crypto_Library_Name := sgx_tcrypto$/;"	m
DEBUG_VALUE	untrusted/App.c	30;"	d	file:
DEBUG_VALUE	untrusted/App.c	32;"	d	file:
DEFAULT_PORT	untrusted/server-tls.c	40;"	d	file:
ENCLAVE_FILENAME	untrusted/App.h	32;"	d
Flags_Just_For_C	sgx_t.mk	/^Flags_Just_For_C := -Wno-implicit-function-declaration -std=c11$/;"	m
LowResTimer	trusted/Wolfssl_Enclave.c	/^int LowResTimer(void) \/* low_res timer *\/$/;"	f
MAXDATASIZE	untrusted/client-tls.c	31;"	d	file:
SERVER_TLS_H	untrusted/server-tls.h	23;"	d
SERV_PORT	untrusted/client-tls.c	32;"	d	file:
SGX_ARCH	Makefile	/^SGX_ARCH ?= x64$/;"	m
SGX_ARCH	sgx_t.mk	/^	SGX_ARCH := x86$/;"	m
SGX_ARCH	sgx_u.mk	/^	SGX_ARCH := x86$/;"	m
SGX_COMMON_CFLAGS	sgx_t.mk	/^	SGX_COMMON_CFLAGS := -m32$/;"	m
SGX_COMMON_CFLAGS	sgx_t.mk	/^	SGX_COMMON_CFLAGS := -m64$/;"	m
SGX_COMMON_CFLAGS	sgx_u.mk	/^	SGX_COMMON_CFLAGS := -m32$/;"	m
SGX_COMMON_CFLAGS	sgx_u.mk	/^	SGX_COMMON_CFLAGS := -m64$/;"	m
SGX_EDGER8R	sgx_t.mk	/^	SGX_EDGER8R := $(SGX_SDK)\/bin\/x64\/sgx_edger8r$/;"	m
SGX_EDGER8R	sgx_t.mk	/^	SGX_EDGER8R := $(SGX_SDK)\/bin\/x86\/sgx_edger8r$/;"	m
SGX_EDGER8R	sgx_u.mk	/^	SGX_EDGER8R := $(SGX_SDK)\/bin\/x64\/sgx_edger8r$/;"	m
SGX_EDGER8R	sgx_u.mk	/^	SGX_EDGER8R := $(SGX_SDK)\/bin\/x86\/sgx_edger8r$/;"	m
SGX_ENCLAVE_SIGNER	sgx_t.mk	/^	SGX_ENCLAVE_SIGNER := $(SGX_SDK)\/bin\/x64\/sgx_sign$/;"	m
SGX_ENCLAVE_SIGNER	sgx_t.mk	/^	SGX_ENCLAVE_SIGNER := $(SGX_SDK)\/bin\/x86\/sgx_sign$/;"	m
SGX_ENCLAVE_SIGNER	sgx_u.mk	/^	SGX_ENCLAVE_SIGNER := $(SGX_SDK)\/bin\/x64\/sgx_sign$/;"	m
SGX_ENCLAVE_SIGNER	sgx_u.mk	/^	SGX_ENCLAVE_SIGNER := $(SGX_SDK)\/bin\/x86\/sgx_sign$/;"	m
SGX_LIBRARY_PATH	sgx_t.mk	/^	SGX_LIBRARY_PATH := $(SGX_SDK)\/lib$/;"	m
SGX_LIBRARY_PATH	sgx_t.mk	/^	SGX_LIBRARY_PATH := $(SGX_SDK)\/lib64$/;"	m
SGX_LIBRARY_PATH	sgx_u.mk	/^	SGX_LIBRARY_PATH := $(SGX_SDK)\/lib$/;"	m
SGX_LIBRARY_PATH	sgx_u.mk	/^	SGX_LIBRARY_PATH := $(SGX_SDK)\/lib64$/;"	m
SGX_MODE	Makefile	/^SGX_MODE ?= SIM$/;"	m
SGX_SDK	Makefile	/^SGX_SDK ?= \/opt\/intel\/sgxsdk$/;"	m
SGX_WOLFSSL_LIB	Makefile	/^SGX_WOLFSSL_LIB ?= .\/$/;"	m
Service_Library_Name	sgx_t.mk	/^	Service_Library_Name := sgx_tservice$/;"	m
Service_Library_Name	sgx_t.mk	/^	Service_Library_Name := sgx_tservice_sim$/;"	m
Trts_Library_Name	sgx_t.mk	/^	Trts_Library_Name := sgx_trts$/;"	m
Trts_Library_Name	sgx_t.mk	/^	Trts_Library_Name := sgx_trts_sim$/;"	m
UNTRUSTED_DIR	sgx_u.mk	/^UNTRUSTED_DIR=untrusted$/;"	m
Urts_Library_Name	sgx_u.mk	/^	Urts_Library_Name := sgx_urts$/;"	m
Urts_Library_Name	sgx_u.mk	/^	Urts_Library_Name := sgx_urts_sim$/;"	m
Wolfssl_C_Extra_Flags	sgx_t.mk	/^Wolfssl_C_Extra_Flags := -DWOLFSSL_SGX$/;"	m
Wolfssl_C_Extra_Flags	sgx_u.mk	/^Wolfssl_C_Extra_Flags := -DWOLFSSL_SGX$/;"	m
Wolfssl_Enclave_C_Files	sgx_t.mk	/^Wolfssl_Enclave_C_Files := trusted\/Wolfssl_Enclave.c$/;"	m
Wolfssl_Enclave_C_Flags	sgx_t.mk	/^Wolfssl_Enclave_C_Flags := $(Flags_Just_For_C) $(Common_C_Cpp_Flags) $(Wolfssl_C_Extra_Flags)$/;"	m
Wolfssl_Enclave_C_Objects	sgx_t.mk	/^Wolfssl_Enclave_C_Objects := $(Wolfssl_Enclave_C_Files:.c=.o)$/;"	m
Wolfssl_Enclave_Include_Paths	sgx_t.mk	/^Wolfssl_Enclave_Include_Paths := -IInclude -Itrusted $(Wolfssl_Include_Paths)\\$/;"	m
Wolfssl_Enclave_Link_Flags	sgx_t.mk	/^Wolfssl_Enclave_Link_Flags := $(SGX_COMMON_CFLAGS) -Wl,--no-undefined -nostdlib -nodefaultlibs -nostartfiles -L$(SGX_LIBRARY_PATH) \\$/;"	m
Wolfssl_Include_Paths	sgx_t.mk	/^Wolfssl_Include_Paths := -I$(WOLFSSL_ROOT)\/ \\$/;"	m
Wolfssl_Include_Paths	sgx_u.mk	/^Wolfssl_Include_Paths := -I$(WOLFSSL_ROOT)\/ \\$/;"	m
_BENCHMARK_ENCLAVE_H_	trusted/Wolfssl_Enclave.h	2;"	d
argc	untrusted/App.c	/^    int    argc;$/;"	m	struct:func_args	file:
argv	untrusted/App.c	/^    char** argv;$/;"	m	struct:func_args	file:
client_connect	untrusted/client-tls.c	/^int client_connect(sgx_enclave_id_t id)$/;"	f
current_time	trusted/Wolfssl_Enclave.c	/^double current_time(void)$/;"	f
current_time	untrusted/App.c	/^static double current_time()$/;"	f	file:
enc_wolfSSL_CTX_free	trusted/Wolfssl_Enclave.c	/^void enc_wolfSSL_CTX_free(WOLFSSL_CTX* ctx)$/;"	f
enc_wolfSSL_CTX_load_verify_buffer	trusted/Wolfssl_Enclave.c	/^int enc_wolfSSL_CTX_load_verify_buffer(WOLFSSL_CTX* ctx, const unsigned char* in,$/;"	f
enc_wolfSSL_CTX_new	trusted/Wolfssl_Enclave.c	/^WOLFSSL_CTX* enc_wolfSSL_CTX_new(WOLFSSL_METHOD* method)$/;"	f
enc_wolfSSL_CTX_set_cipher_list	trusted/Wolfssl_Enclave.c	/^int enc_wolfSSL_CTX_set_cipher_list(WOLFSSL_CTX* ctx, const char* list) {$/;"	f
enc_wolfSSL_CTX_use_PrivateKey_buffer	trusted/Wolfssl_Enclave.c	/^int enc_wolfSSL_CTX_use_PrivateKey_buffer(WOLFSSL_CTX* ctx, const unsigned char* buf,$/;"	f
enc_wolfSSL_CTX_use_certificate_buffer	trusted/Wolfssl_Enclave.c	/^int enc_wolfSSL_CTX_use_certificate_buffer(WOLFSSL_CTX* ctx,$/;"	f
enc_wolfSSL_CTX_use_certificate_chain_buffer_format	trusted/Wolfssl_Enclave.c	/^int enc_wolfSSL_CTX_use_certificate_chain_buffer_format(WOLFSSL_CTX* ctx,$/;"	f
enc_wolfSSL_Cleanup	trusted/Wolfssl_Enclave.c	/^int enc_wolfSSL_Cleanup(void)$/;"	f
enc_wolfSSL_Debugging_OFF	trusted/Wolfssl_Enclave.c	/^void enc_wolfSSL_Debugging_OFF(void)$/;"	f
enc_wolfSSL_Debugging_ON	trusted/Wolfssl_Enclave.c	/^void enc_wolfSSL_Debugging_ON(void)$/;"	f
enc_wolfSSL_Init	trusted/Wolfssl_Enclave.c	/^int enc_wolfSSL_Init(void)$/;"	f
enc_wolfSSL_connect	trusted/Wolfssl_Enclave.c	/^int enc_wolfSSL_connect(WOLFSSL* ssl)$/;"	f
enc_wolfSSL_free	trusted/Wolfssl_Enclave.c	/^void enc_wolfSSL_free(WOLFSSL* ssl)$/;"	f
enc_wolfSSL_get_error	trusted/Wolfssl_Enclave.c	/^int enc_wolfSSL_get_error(WOLFSSL* ssl, int ret)$/;"	f
enc_wolfSSL_new	trusted/Wolfssl_Enclave.c	/^WOLFSSL* enc_wolfSSL_new( WOLFSSL_CTX* ctx)$/;"	f
enc_wolfSSL_read	trusted/Wolfssl_Enclave.c	/^int enc_wolfSSL_read(WOLFSSL* ssl, void* data, int sz)$/;"	f
enc_wolfSSL_set_fd	trusted/Wolfssl_Enclave.c	/^int enc_wolfSSL_set_fd(WOLFSSL* ssl, int fd)$/;"	f
enc_wolfSSL_write	trusted/Wolfssl_Enclave.c	/^int enc_wolfSSL_write(WOLFSSL* ssl, const void* in, int sz)$/;"	f
enc_wolfTLSv1_2_client_method	trusted/Wolfssl_Enclave.c	/^WOLFSSL_METHOD* enc_wolfTLSv1_2_client_method(void)$/;"	f
enc_wolfTLSv1_2_server_method	trusted/Wolfssl_Enclave.c	/^WOLFSSL_METHOD* enc_wolfTLSv1_2_server_method(void)$/;"	f
func_args	untrusted/App.c	/^typedef struct func_args {$/;"	s	file:
func_args	untrusted/App.c	/^} func_args;$/;"	t	typeref:struct:func_args	file:
main	untrusted/App.c	/^int main(int argc, char* argv[]) \/* not using since just testing w\/ wc_test *\/$/;"	f
ntimes	untrusted/App.h	/^	ntimes = 30 \/* how many itteration to run RSA decrypt\/encrypt *\/$/;"	e	enum:BenchmarkBounds
numBlocks	untrusted/App.h	/^	numBlocks = 10, \/* how many megs to test *\/$/;"	e	enum:BenchmarkBounds
ocall_current_time	untrusted/App.c	/^void ocall_current_time(double* time)$/;"	f
ocall_low_res_time	untrusted/App.c	/^void ocall_low_res_time(int* time)$/;"	f
ocall_print_string	untrusted/App.c	/^void ocall_print_string(const char *str)$/;"	f
ocall_recv	untrusted/App.c	/^size_t ocall_recv(int sockfd, void *buf, size_t len, int flags)$/;"	f
ocall_send	untrusted/App.c	/^size_t ocall_send(int sockfd, const void *buf, size_t len, int flags)$/;"	f
printf	trusted/Wolfssl_Enclave.c	/^void printf(const char *fmt, ...)$/;"	f
recv	trusted/Wolfssl_Enclave.c	/^size_t recv(int sockfd, void *buf, size_t len, int flags)$/;"	f
return_code	untrusted/App.c	/^    int    return_code;$/;"	m	struct:func_args	file:
send	trusted/Wolfssl_Enclave.c	/^size_t send(int sockfd, const void *buf, size_t len, int flags)$/;"	f
server_connect	untrusted/server-tls.c	/^int server_connect(sgx_enclave_id_t id)$/;"	f
sprintf	trusted/Wolfssl_Enclave.c	/^int sprintf(char* buf, const char *fmt, ...)$/;"	f
wc_benchmark_test	trusted/Wolfssl_Enclave.c	/^int wc_benchmark_test(void* args)$/;"	f
wc_test	trusted/Wolfssl_Enclave.c	/^int wc_test(void* args)$/;"	f
